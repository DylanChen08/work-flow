"use strict";const i=require("electron"),w=require("child_process"),v=require("util"),_=require("path"),D=require("fs");function f(t){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t){for(const r in t)if(r!=="default"){const o=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,o.get?o:{enumerable:!0,get:()=>t[r]})}}return e.default=t,Object.freeze(e)}const d=f(_),p=f(D),h=v.promisify(w.exec);let g=null;function S(){const t=d.join(process.cwd(),"data");return p.existsSync(t)||p.mkdirSync(t,{recursive:!0}),t}function y(){g=new i.BrowserWindow({width:1200,height:800,webPreferences:{preload:d.join(__dirname,"preload.js"),nodeIntegration:!0,contextIsolation:!0,sandbox:!1}}),console.log("Preload path:",d.join(__dirname,"preload.js")),process.env.VITE_DEV_SERVER_URL?(g.loadURL(process.env.VITE_DEV_SERVER_URL),g.webContents.openDevTools()):g.loadFile("dist/index.html")}i.app.whenReady().then(()=>{y()});async function C(t){try{console.log("Getting git users for path:",t);const{stdout:e,stderr:r}=await h('git log --format="%an" | sort -u',{cwd:t,encoding:"utf8"});console.log("Git users stdout:",e),console.log("Git users stderr:",r);const n=String(e||"").split(`
`).map(c=>{try{return String(c||"").trim()}catch(a){return console.error("Error processing user line:",a,c),""}}).filter(Boolean);return console.log("Processed users:",n),n}catch(e){return console.error("Failed to get git users:",e),[]}}async function E(t,e,r){try{console.log("Getting git commits for path:",t,"authors:",e,"since:",r);const{stdout:o,stderr:n}=await h(`git log --since="${r}" --pretty=format:"%an||%s" --abbrev-commit`,{cwd:t,encoding:"utf8"});console.log("Git commits stdout:",o),console.log("Git commits stderr:",n);const a=String(o||"").split(`
`).filter(l=>{if(!l||typeof l!="string")return!1;const s=l.split("||");if(s.length<2)return!1;const[u]=s;return e.includes(u)}).map(l=>{try{const s=l.split("||");if(s.length<2)return"";const[,u]=s;return String(u||"").replace(/^(feat|fix|refactor|style|perf|test|docs|chore|build|ci|revert|merge)(\([^)]*\))?:\s*/,"").trim()}catch(s){return console.error("Error processing commit line:",s,l),""}}).filter(Boolean);return console.log("Processed commits:",a),a}catch(o){return console.error("Error in getGitCommits:",o),[]}}i.ipcMain.handle("get-git-users",async(t,e)=>{try{console.log("IPC: get-git-users called with path:",e);const r=await C(e);console.log("IPC: getGitUsers returned:",r);const o=r.map(n=>{try{return String(n||"").trim()}catch(c){return console.error("Error converting user to string:",c),""}}).filter(Boolean);return console.log("IPC: returning safe users:",o),{users:o}}catch(r){return console.error(`Failed to get users for ${e}:`,r),{users:[]}}});i.ipcMain.handle("generate-report",async(t,e)=>{const{path:r,startDate:o,endDate:n,authors:c}=e;try{if(console.log("IPC: generate-report called with config:",e),!r||!o||!n||!Array.isArray(c))return console.error("Invalid parameters:",{path:r,startDate:o,endDate:n,authors:c}),{commits:[]};const a=new Date(o).toISOString();console.log("IPC: calling getGitCommits with since:",a);const l=await E(r,c,a);console.log("IPC: getGitCommits returned:",l);const s=l.map(u=>{try{return String(u||"").trim()}catch(m){return console.error("Error converting commit to string:",m),""}}).filter(Boolean);return console.log("IPC: returning safe commits:",s),{commits:s}}catch(a){return console.error(`Failed to get commits for ${r}:`,a),{commits:[]}}});i.ipcMain.handle("save-report",async(t,{content:e,fileName:r})=>{try{const o=S(),n=d.join(o,r);return p.writeFileSync(n,e,"utf8"),{success:!0,fileName:n}}catch(o){throw console.error("Failed to save report:",o),o}});i.ipcMain.handle("dialog:openDirectory",async()=>{const{canceled:t,filePaths:e}=await i.dialog.showOpenDialog({properties:["openDirectory"]});return t?"":e[0]});i.app.on("window-all-closed",()=>{process.platform!=="darwin"&&i.app.quit()});i.app.on("activate",()=>{g===null&&y()});
